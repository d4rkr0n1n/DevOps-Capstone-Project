apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  namespace: demo
  name: ebs-sc
provisioner: ebs.csi.aws.com
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: demo
  name: ebs-claim
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ebs-sc
  resources:
    requests:
      storage: 4Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: demo
data:
  redis.conf: |
    dir /var/lib/redis
    appendonly yes
    protected-mode no

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-server
  namespace: demo
spec:
  serviceName: "redis-headless"
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:6-alpine
          ports:
            - containerPort: 6379
          command:
            - "redis-server"
            - "/etc/redis/redis.conf"
          volumeMounts:
            - name: redis-data
              mountPath: /var/lib/redis
            - name: config
              mountPath: /etc/redis/redis.conf
              subPath: redis.conf
          resources:
            limits:
              cpu: "200m"
              memory: "200Mi"
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: ebs-claim
        - name: config
          configMap:
            name: redis-config
  volumeClaimTemplates:
    - metadata:
        name: ebs-claim
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "ebs-sc"
        resources:
          requests:
            storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: demo
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP
